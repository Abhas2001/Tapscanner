{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anjal\\\\Desktop\\\\naya\\\\my-app\\\\src\\\\Pdf.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport html2pdf from \"html2pdf.js\";\nimport './pdf.css';\nimport { ima } from './images/dummy.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pdf = () => {\n  _s();\n  const contentRef = useRef();\n  const exportHTMLtoPDF = () => {\n    const element = contentRef.current; // Access the component using the ref\n\n    // Wait for the image to load before generating the PDF\n    const imgElement = element.querySelector('img');\n    if (imgElement.complete) {\n      // If the image is already loaded, generate the PDF\n      html2pdf().from(element).save('exported_file.pdf');\n    } else {\n      // Wait for the image to load and then generate the PDF\n      imgElement.onload = () => {\n        html2pdf().from(element).save('exported_file.pdf');\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      className: \"main\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Export this content to PDF\", /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"img\",\n          src: images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportHTMLtoPDF,\n      className: \"butt\",\n      children: \"Export to PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Pdf, \"76RymMQDwORkpkOdsElhIIY+DNc=\");\n_c = Pdf;\nexport default Pdf;\nvar _c;\n$RefreshReg$(_c, \"Pdf\");","map":{"version":3,"names":["React","useRef","html2pdf","ima","jsxDEV","_jsxDEV","Pdf","_s","contentRef","exportHTMLtoPDF","element","current","imgElement","querySelector","complete","from","save","onload","children","ref","className","src","images","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anjal/Desktop/naya/my-app/src/Pdf.jsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport html2pdf from \"html2pdf.js\";\r\nimport './pdf.css';\r\nimport {ima} from './images/dummy.jpg'\r\n\r\n\r\nconst Pdf = () => {\r\n  const contentRef = useRef(); \r\n\r\n  const exportHTMLtoPDF = () => {\r\n    const element = contentRef.current; // Access the component using the ref\r\n    \r\n    // Wait for the image to load before generating the PDF\r\n    const imgElement = element.querySelector('img');\r\n    if (imgElement.complete) {\r\n      // If the image is already loaded, generate the PDF\r\n      html2pdf().from(element).save('exported_file.pdf');\r\n    } else {\r\n      // Wait for the image to load and then generate the PDF\r\n      imgElement.onload = () => {\r\n        html2pdf().from(element).save('exported_file.pdf');\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div ref={contentRef} className=\"main\"> {/* Attach the ref to this div */}\r\n        <h1>Export this content to PDF\r\n        <img className='img' src={images}/>\r\n        </h1>\r\n      </div>\r\n      <button onClick={exportHTMLtoPDF} className=\"butt\">Export to PDF</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pdf\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAO,WAAW;AAClB,SAAQC,GAAG,QAAO,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,UAAU,GAAGP,MAAM,CAAC,CAAC;EAE3B,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,OAAO,GAAGF,UAAU,CAACG,OAAO,CAAC,CAAC;;IAEpC;IACA,MAAMC,UAAU,GAAGF,OAAO,CAACG,aAAa,CAAC,KAAK,CAAC;IAC/C,IAAID,UAAU,CAACE,QAAQ,EAAE;MACvB;MACAZ,QAAQ,CAAC,CAAC,CAACa,IAAI,CAACL,OAAO,CAAC,CAACM,IAAI,CAAC,mBAAmB,CAAC;IACpD,CAAC,MAAM;MACL;MACAJ,UAAU,CAACK,MAAM,GAAG,MAAM;QACxBf,QAAQ,CAAC,CAAC,CAACa,IAAI,CAACL,OAAO,CAAC,CAACM,IAAI,CAAC,mBAAmB,CAAC;MACpD,CAAC;IACH;EACF,CAAC;EAED,oBACEX,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAKc,GAAG,EAAEX,UAAW;MAACY,SAAS,EAAC,MAAM;MAAAF,QAAA,GAAC,GAAC,eACtCb,OAAA;QAAAa,QAAA,GAAI,4BACJ,eAAAb,OAAA;UAAKe,SAAS,EAAC,KAAK;UAACC,GAAG,EAAEC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNrB,OAAA;MAAQsB,OAAO,EAAElB,eAAgB;MAACW,SAAS,EAAC,MAAM;MAAAF,QAAA,EAAC;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAAAnB,EAAA,CA7BKD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA+BT,eAAeA,GAAG;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}